package {{ .GetPackageName }}

/**
    AUTOGENERATED. Please, do not edit.
**/

import (
	"github.com/labstack/echo/v4"
	"net/http"
)

{{ $hasComponentErrorResponse := .HasComponentErrorResponse }}

{{ define "refOrSchema" -}}
{{ if .Ref -}}{{ .Ref.GetTypeName }}{{ else }}{{ template "schemaType" .Schema }}{{ end }}
{{- end }}

{{- define "pointerForSchema" }}
{{- if isStructSchema . -}}*{{ end -}}
{{ end -}}

{{- define "validation" -}}
{{- $tags := .Schema.GetValidationTags .IsRequired -}}
{{- if $tags }}validate:"{{ $tags }}"{{ end -}}
{{- end -}}

{{ define "properties" }}
{{- $parentSchema := . -}}
{{ range $name, $schema := .Properties -}}
    {{- $isRequired := $parentSchema.IsFieldRequired $name -}}
    {{ toCamel $name }} {{ if not $isRequired }}{{ template "pointerForSchema" $schema }}{{ end }} {{ template "schemaType" $schema }} `json:"{{ $name }}{{ if not $isRequired }},omitempty{{ end }}"`
{{ end }}
{{ end }}

{{ define "schemaType" }}
{{- if .AdditionalProperties -}}
    map[string]interface{}
{{- else -}}
    {{- if .AllOf -}}
        struct {
            {{- range .AllOf }}
                {{ if .Type.IsObject -}}
                    {{ template "properties" . }}
                {{- end -}}
                {{- if .Ref -}}
                    {{ .Ref.GetTypeName }}
                {{- end -}}
            {{ end -}}
        }
    {{- else -}}
        {{- if .Ref -}}
        {{ .Ref.GetTypeName }}
        {{- else -}}
            {{- if .Type.IsObject -}}
                struct {
                    {{ template "properties" . }}
                }
            {{- else -}}
                {{ .GetGoType }}
            {{- end -}}
        {{- end -}}
    {{ end -}}
{{ end -}}
{{ end -}}

/* Components schemas */
{{ range $name, $schema := .Components.Schemas }}
type {{ $name }}Schema {{ template "schemaType" $schema }}
{{ end }}

/* Components responses */
{{ range $name, $response := .Components.Responses }}
type {{ $name }}Response {{ template "refOrSchema" dict "Ref" $response.Ref "Schema" $response.Content.JSON.Schema }}
{{ end }}

/* Endpoints parameters */
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
type {{ pathToMethodName $path $method }}Params struct {
    {{ range $operation.Parameters -}}
    {{ toCamel .Name }} {{ if not .IsRequired }}*{{ end }}{{ template "schemaType" .Schema }}{{- " " -}}
    `{{ if eq .In "path" }}param:"{{ .Name }}"{{ end }}{{ if eq .In "query" }}query:"{{ .Name }}"{{ end }}`
    {{ end }}
}
{{ end }}
{{ end }}

/* Endpoints response object */
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ range $statusCode, $response := $operation.Responses -}}
{{ if and ($response.IsInlineStructType) (not $response.IsEmpty) -}}
type {{ pathToMethodName $path $method }}HTTP{{ toCamel $statusCode }}Response {{ template "refOrSchema" dict "Ref" $response.Ref "Schema" $response.Content.JSON.Schema }}
{{- end }}
{{ end }}
{{ end }}
{{ end }}

/* Endpoints responses */

{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ if not $operation.IsAllEmptyResponses }}
type {{ pathToMethodName $path $method }}Response struct {
    Code int
    {{ range $statusCode, $response := $operation.Responses -}}
    {{- if not $response.IsEmpty -}}
    HTTP{{ toCamel $statusCode }} *
        {{- if $response.IsInlineStructType -}}
            {{ pathToMethodName $path $method }}HTTP{{ toCamel $statusCode }}Response
        {{- else -}}
            {{ template "refOrSchema" dict "Ref" $response.Ref "Schema" $response.Content.JSON.Schema }}
        {{- end -}}
    {{- end }}
    {{ end }}
}
{{ end }}
{{ end }}
{{ end }}

type Controller interface {
    {{ range $path, $operations := .Paths -}}
    {{- range $method, $operation := $operations -}}
    {{- $baseName := pathToMethodName $path $method -}}
    {{ $baseName }}(params {{ $baseName }}Params, writer http.ResponseWriter) (
        {{- if not $operation.IsAllEmptyResponses -}}
        {{ $baseName }}Response
        {{- else -}}
        int
        {{- end }}, string)
    {{ end -}}
    {{- end }}
    {{ if $hasComponentErrorResponse }}Error(err string) ErrorResponse{{ end }}
}

func sendHTTPBadRequestError(c echo.Context, err error) error {
	return c.JSON(http.StatusBadRequest, ErrorResponse{
		Message: err.Error(),
	})
}

func BuildRoutes(e *echo.Group, controller Controller) {
{{ range $path, $operations := .Paths -}}
{{ range $method, $operation := $operations -}}
    {{ if $operation.Description }}// {{ $operation.Description }} {{ end }}
    e.{{ toUpper $method }}("{{ toColumnParametersPath $path }}", func(c echo.Context) error {
        {{ $methodName := pathToMethodName $path $method -}}
        parameters := {{ $methodName }}Params{}
        if err := c.Bind(&parameters); err != nil {
            return sendHTTPBadRequestError(c, err)
        }

        response, err := controller.{{ $methodName }}(parameters, c.Response().Writer)
        if err != "" {
            {{ if $hasComponentErrorResponse -}}
			return c.JSON({{ if $operation.IsAllEmptyResponses }}response{{ else }}response.Code{{ end }}, controller.Error(err))
            {{- else -}}
            // Define #/components/responses/Error object for handy error handling
            {{- end }}
        }
        {{ range $statusCode, $response := $operation.Responses -}}
        {{- if not $response.IsEmpty -}}
        if response.HTTP{{ toCamel $statusCode }} != nil {
            if response.Code == 0 {
                response.Code = {{ getDefaultStatusCode $statusCode }}
            }
            return c.JSON(response.Code, response.HTTP{{ toCamel $statusCode }})
        }
        {{- end }}
        {{ end }}

        {{ if $operation.IsAllEmptyResponses -}}
        return c.NoContent(response)
        {{- else -}}
        return c.NoContent(response.Code)
        {{- end }}
    })
{{ end }}
{{ end }}
}