package {{ .GetPackageName }}

/**
    AUTOGENERATED. Please, do not edit.
**/

import (
	"fmt"
	"github.com/creasty/defaults"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	"net/http"
	"reflect"
	"strings"
)

{{ $hasGenericErrorResponse := .HasGenericErrorResponse }}

{{ define "refOrSchema" -}}
{{ if .Ref -}}
    {{ if .IsOptional -}}
        {{- template "pointerForRef" .Ref -}}
    {{- end }}
    {{- .Ref.GetTypeName -}}
{{- else -}}
    {{ if .IsOptional -}}
        {{- template "pointerForSchema" .Schema -}}
    {{- end }}
    {{- template "schemaType" .Schema -}}
{{- end }}
{{- end }}

{{- define "pointerForSchema" -}}
{{ if not (isNillableSchema .) -}}*{{ end }}
{{- end -}}

{{- define "pointerForOmmitableSchema" -}}
{{ if not (isOmmitableSchema .) -}}*{{ end }}
{{- end -}}

{{- define "pointerForRef" -}}
{{ if not (isNillableSchema (getUnderlyingSchema .)) }}*{{ end }}
{{- end -}}

{{- define "validation" -}}
{{- $tags := .Schema.GetValidationTags .IsRequired -}}
{{- if $tags }} validate:"{{ $tags }}"{{ end -}}
{{- end -}}

{{- define "defaults" -}}
{{- $tags := .GetDefaultsTags -}}
{{- if $tags }} {{ $tags }}{{ end -}}
{{- end -}}

{{ define "properties" }}
{{- $parentSchema := . -}}
{{ range $name, $schema := .Properties -}}
    {{- $isOptional := $parentSchema.IsFieldOptional $name -}}
    {{ toCamel $name }} {{ if $isOptional }}{{ template "pointerForOmmitableSchema" $schema }}{{ end }}{{ template "schemaType" $schema }} `json:"{{ $name }}{{ if $isOptional }},omitempty{{ end }}"`
{{ end }}
{{ end }}

{{ define "schemaType" }}
{{- if .AdditionalProperties -}}
    map[string]interface{}
{{- else -}}
    {{- if .AllOf -}}
        struct {
            {{- range .AllOf }}
                {{ if .Type.IsObject -}}
                    {{ template "properties" . }}
                {{- end -}}
                {{- if .Ref -}}
                    {{ .Ref.GetTypeName }}
                {{- end -}}
            {{ end -}}
        }
    {{- else -}}
        {{- if .Ref -}}
        {{ .Ref.GetTypeName }}
        {{- else -}}
            {{- if .Type.IsObject -}}
                struct {
                    {{ template "properties" . }}
                }
            {{- else -}}
                {{ .GetGoType }}
            {{- end -}}
        {{- end -}}
    {{ end -}}
{{ end -}}
{{ end -}}

/* Components schemas */
{{ range $name, $schema := .Components.Schemas }}
type {{ $name }}Schema {{ template "schemaType" $schema }}
{{ end }}

/* Components responses */
{{ range $name, $response := .Components.Responses }}
type {{ $name }}Response {{ template "refOrSchema" dict "Ref" $response.Ref "Schema" $response.Content.JSON.Schema }}
{{ end }}

/* Endpoints parameters */
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
type {{ operationId $path $method $operation }}Params struct {
    {{ range $operation.Parameters -}}
    {{ toCamel .Name }} {{ if and (not .IsRequired) (not .HasDefault) }}{{ template "pointerForSchema" .Schema }}{{ end }}{{ template "schemaType" .Schema }}{{- " " -}}
    `{{ if eq .In "path" }}param:"{{ .Name }}"{{ end }}{{ if eq .In "query" }}query:"{{ .Name }}"{{ end }}
    {{- template "validation" dict "Schema" .Schema "IsRequired" .IsRequired }}
    {{- if not .IsRequired }}{{ template "defaults" .Schema }}{{ end }}`
    {{ end }}
}
{{ end }}
{{ end }}

/* Endpoints response objects */
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ range $statusCode, $response := $operation.Responses -}}
{{ if and ($response.IsInlineStructType) (not $response.IsEmpty) -}}
type {{ operationId $path $method $operation }}Http{{ toCamel $statusCode }}Response {{ template "schemaType" $response.Content.JSON.Schema }}
{{- end }}
{{ end }}
{{ end }}
{{ end }}

/* Endpoints responses */
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ if not $operation.IsAllEmptyResponses }}
type {{ operationId $path $method $operation }}Response struct {
    Code int
    {{ range $statusCode, $response := $operation.Responses -}}
    {{ $isCommonError := and $hasGenericErrorResponse (eq $statusCode "default") }}
    {{- if and (not $response.IsEmpty) (not $isCommonError) -}}
    Http{{ toCamel $statusCode }}{{- " " -}}
        {{- if $response.IsInlineStructType -}}
            {{- template "pointerForSchema" $response.Content.JSON.Schema -}}
            {{- operationId $path $method $operation }}Http{{ toCamel $statusCode }}Response
        {{- else -}}
            {{- template "refOrSchema" dict "Ref" $response.Ref "Schema" $response.Content.JSON.Schema "IsOptional" true -}}
        {{- end -}}
    {{- end }}
    {{ end }}
}
{{ end }}
{{ end }}
{{ end }}

type Controller interface {
    {{ range $path, $operations := .Paths -}}
    {{- range $method, $operation := $operations -}}
    {{- $baseName := operationId $path $method $operation -}}
    {{ $baseName }}(params {{ $baseName }}Params, req *http.Request, res http.ResponseWriter) (
        {{- if not $operation.IsAllEmptyResponses -}}
        {{ $baseName }}Response
        {{- else -}}
        int
        {{- end }}{{ if $hasGenericErrorResponse -}}, error{{ end }})
    {{ end -}}
    {{- end }}
    {{ if $hasGenericErrorResponse }}Error(err error) ErrorResponse{{ end }}
}

var validate *validator.Validate

func validateInputParameters(params interface{}) error {
    if params == nil {
        return nil
    }

    err := validate.Struct(params)
    if validationErrors, ok := err.(validator.ValidationErrors); ok {
        for _, e := range validationErrors {
            return fmt.Errorf("validation error: parameter '%s' (%v), rule: %s \n", e.Field(), e.Value(), e.Tag())
        }
    }

    return nil
}

func BuildRoutes(e *echo.Group, controller Controller
{{- if .GetAllMiddlewareNames -}}
{{ range .GetAllMiddlewareNames }}, {{ toLowerCamel . }} echo.MiddlewareFunc{{ end }}
{{- end -}}
) {
    validate = validator.New()
    validate.RegisterTagNameFunc(func(fld reflect.StructField) string {
        name := strings.SplitN(fld.Tag.Get("json"), ",", 2)[0]
        if name == "-" {
            return ""
        }
        return name
    })

{{ range $path, $operations := .Paths -}}
{{ range $method, $operation := $operations -}}
    {{ if $operation.Description }}// {{ $operation.Description }} {{ end }}
    e.{{ toUpper $method }}("{{ toColumnParametersPath $path }}", func(c echo.Context) error {
        {{ $methodName := operationId $path $method $operation -}}
        parameters := {{ $methodName }}Params{}
        if err := c.Bind(&parameters); err != nil {
            {{ if $hasGenericErrorResponse -}}
            return c.JSON(http.StatusBadRequest, controller.Error(err))
            {{- else -}}
            return c.String(http.StatusBadRequest, err.Error())
            {{- end }}
        }
        if err := defaults.Set(&parameters); err != nil {
            {{ if $hasGenericErrorResponse -}}
            return c.JSON(http.StatusInternalServerError, controller.Error(err))
            {{- else -}}
            return c.String(http.StatusInternalServerError, err.Error())
            {{- end }}
        }
        if err := validateInputParameters(&parameters); err != nil {
            {{ if $hasGenericErrorResponse -}}
            return c.JSON(http.StatusBadRequest, controller.Error(err))
            {{- else -}}
            return c.String(http.StatusBadRequest, err.Error())
            {{- end }}
        }

        {{ if $hasGenericErrorResponse -}}
        response, err := controller.{{ $methodName }}(parameters, c.Request(), c.Response().Writer)
        if err != nil {
            return c.JSON({{ if $operation.IsAllEmptyResponses }}response{{ else }}response.Code{{ end }}, controller.Error(err))
        }
        {{ else }}
        response := controller.{{ $methodName }}(parameters, c.Request(), c.Response().Writer)
        {{ end }}

        {{ range $statusCode, $response := $operation.Responses -}}
        {{ $isCommonError := and $hasGenericErrorResponse (eq $statusCode "default") }}
        {{- if and (not $response.IsEmpty) (not $isCommonError) -}}
        if response.Http{{ toCamel $statusCode }} != nil {
            if response.Code == 0 {
                response.Code = {{ getDefaultStatusCode $statusCode }}
            }
            return c.JSON(response.Code, response.Http{{ toCamel $statusCode }})
        }
        {{- end }}
        {{ end }}

        {{ if $operation.IsAllEmptyResponses -}}
        return c.NoContent(response)
        {{- else -}}
        return c.NoContent(response.Code)
        {{- end }}
    }{{ range $operation.XMiddlewares }}, {{ . }}{{ end }})
{{ end }}
{{ end }}
}