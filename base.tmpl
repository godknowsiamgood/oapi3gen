package {{ .GetPackageName }}

/**
    AUTOGENERATED. Please, do not edit.
**/

/*imports*/

{{/*server*/}}

{{ define "refOrSchema" -}}
{{ if .Ref -}}
    {{ if .IsOptional -}}
        {{- template "pointerForRef" .Ref -}}
    {{- end }}
    {{- .Ref.GetTypeName -}}
{{- else -}}
    {{ if .IsOptional -}}
        {{- template "pointerForSchema" .Schema -}}
    {{- end }}
    {{- template "schemaType" .Schema -}}
{{- end }}
{{- end }}

{{- define "pointerForSchema" -}}
{{ if not (isNillableSchema .) -}}*{{ end }}
{{- end -}}

{{- define "pointerForOmmitableSchema" -}}
{{ if not (isOmmitableSchema .) -}}*{{ end }}
{{- end -}}

{{- define "pointerForRef" -}}
{{ if not (isNillableSchema (getUnderlyingSchema .)) }}*{{ end }}
{{- end -}}

{{- define "pointerForBodyRequest" -}}
{{ if not (isNillableSchema (getUnderlyingSchema .)) }}*{{ end }}
{{- end -}}

{{ define "properties" }}
{{- $parentSchema := . -}}
{{ range $name, $schema := .Properties -}}
    {{- if ne $schema.Format "binary" -}} {{/* don't bother with binary fields, they can be handled in controllers */}}
        {{- toCamel $name }}{{ " " }}
        {{- if $parentSchema.IsFieldOptional $name }}
            {{- if isStruct $schema -}}
            * {{/* optional struct is always with pointer */}}
            {{- else }}
                {{- if or (eq getContext "parameters") (eq getContext "requestBody") }}
                    {{- if not $schema.HasDefault }}
                    {{- template "pointerForOmmitableSchema" $schema }}
                    {{- end }}
                {{- end }}
            {{- end }}
        {{- end }}
        {{- template "schemaType" $schema }} {{ " " }}
        {{- server.FieldTags getContext $name . $parentSchema }}
    {{- end }}
{{ end }}
{{ end }}

{{ define "schemaType" }}
{{- if .AdditionalProperties -}}
    map[string]interface{}
{{- else -}}
    {{- if .AllOf -}}
        struct {
            {{- range .AllOf }}
                {{ if .Type.IsObject -}}
                    {{ template "properties" . }}
                {{- end -}}
                {{- if .Ref -}}
                    {{ .Ref.GetTypeName }}
                {{- end -}}
            {{ end -}}
        }
    {{- else -}}
        {{- if .Ref -}}
        {{ .Ref.GetTypeName }}
        {{- else -}}
            {{- if .Type.IsObject -}}
                struct {
                    {{ template "properties" . }}
                }
            {{- else -}}
                {{- if .Type.IsArray -}}
                    []{{ template "schemaType" .Items }}
                {{- else -}}
                    {{ .GetGoType }}
                {{- end -}}
            {{- end -}}
        {{- end -}}
    {{ end -}}
{{ end -}}
{{ end -}}


{{ setContext "components" }}

/* Components schemas */
{{ range $name, $schema := .Components.Schemas }}
type {{ $name }}Schema {{ template "schemaType" $schema }}
{{ end }}

/* Components responses */
{{ range $name, $response := .Components.Responses }}
type {{ $name }}Response {{ template "refOrSchema" dict "Ref" $response.Ref "Schema" $response.Content.GetBindableParametersSchema }}
{{ end }}

/* Parameters */
{{ setContext "parameters" }}
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ if len $operation.Parameters }}
type {{ operationId $path $method $operation }}Params struct {
    {{ range $operation.Parameters -}}
    {{ toCamel .Name }} {{ if and (not .IsRequired) (not .Schema.HasDefault) }}{{ template "pointerForSchema" .Schema }}{{ end }}{{ template "schemaType" .Schema }} {{ server.OperationParameterTags . }}
    {{ end }}
}
{{ end }}
{{ end }}
{{ end }}

/* Requests bodies */
{{ setContext "requestBody" }}
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ if $operation.HasRequestBodyBindableParameters }}
type {{ operationId $path $method $operation }}Body{{ " " }}
    {{- template "schemaType" $operation.RequestBody.Content.GetBindableParametersSchema }}
{{ end }}
{{ end }}
{{ end }}

/* Response objects */
{{ setContext "components" }}
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ range $statusCode, $response := $operation.Responses -}}
{{ if and ($response.IsInlineStructType) (not $response.IsEmpty) -}}
type {{ operationId $path $method $operation }}Http{{ toCamel $statusCode }}Response {{ template "schemaType" $response.Content.GetBindableParametersSchema }}
{{- end }}
{{ end }}
{{ end }}
{{ end }}

/* Responses */
{{ range $path, $operations := .Paths }}
{{ range $method, $operation := $operations }}
{{ if not $operation.IsAllEmptyResponses }}
type {{ operationId $path $method $operation }}Response struct {
    Code int
    {{ range $statusCode, $response := $operation.Responses -}}
    {{ $isCommonError := and hasGenericErrorResponse (eq $statusCode "default") }}
    {{- if and (not $response.IsEmpty) (not $isCommonError) -}}
    Http{{ toCamel $statusCode }}{{- " " -}}
        {{- if $response.IsInlineStructType -}}
            {{- template "pointerForSchema" $response.Content.GetBindableParametersSchema -}}
            {{- operationId $path $method $operation }}Http{{ toCamel $statusCode }}Response
        {{- else -}}
            {{- template "refOrSchema" dict "Ref" $response.Ref "Schema" $response.Content.GetBindableParametersSchema "IsOptional" true -}}
        {{- end -}}
    {{- end }}
    {{ end }}
}
{{ end }}
{{ end }}
{{ end }}

type Controller interface {
    {{ range $path, $operations := .Paths -}}
    {{- range $method, $operation := $operations -}}
    {{- $baseName := operationId $path $method $operation -}}
    {{ $baseName }}(
        {{- if len $operation.Parameters -}}
            params *{{ $baseName }}Params,
        {{- end }}
        {{- if $operation.HasRequestBodyBindableParameters -}}
            body *{{ $baseName }}Body,
        {{- end -}}
        {{- addImport "net/http" -}}
        req *http.Request, res http.ResponseWriter) (
        {{- if not $operation.IsAllEmptyResponses -}}
        {{ $baseName }}Response
        {{- else -}}
        int
        {{- end }}{{ if hasGenericErrorResponse -}}, error{{ end }})
    {{ end -}}
    {{- end }}
    {{ if hasGenericErrorResponse }}Error(err error) ErrorResponse{{ end }}
}

{{/*boilerplate*/}}