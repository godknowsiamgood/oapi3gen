package v1

/**
    AUTOGENERATED. Please, do not edit.
**/

import (
	"net/http"
)

/* Components schemas */

type ErrorSchema struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

type InnerMapSchema map[string]interface{}

type InnerStructSchema struct {
	X string `json:"x,omitempty"`
	Y string `json:"y,omitempty"`
}

type OuterSchema struct {
	Inner1 InnerMapSchema     `json:"inner1"`
	Inner2 InnerMapSchema     `json:"inner2,omitempty"`
	Inner3 InnerStructSchema  `json:"inner3"`
	Inner4 *InnerStructSchema `json:"inner4,omitempty"`
	Z      string             `json:"z,omitempty"`
}

type PetSchema struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
	Tag  string `json:"tag,omitempty"`
}

type PetsSchema []PetSchema

/* Components responses */

/* Parameters */

type PostAaaParams struct {
	Test *int64 `query:"test"`
}

type PutAaaParams struct {
	Test *int64 `query:"test"`
}

type ListPetsParams struct {
	Limit *int32 `query:"limit"`
}

type ShowPetByIdParams struct {
	PetId string `param:"petId" validate:"required"`
}

type PostTestFromDataParams struct {
	In1 *string `query:"in_1"`
	In2 string  `query:"in_2" validate:"required"`
}

type GetTestInnersParams struct {
	In1 InnerMapSchema     `query:"in_1"`
	In2 InnerMapSchema     `query:"in_2" validate:"required"`
	In3 *InnerStructSchema `query:"in_3"`
	In4 InnerStructSchema  `query:"in_4" validate:"required"`
}

/* Requests bodies */

type PostAaaBody PetSchema

type PutAaaBody PetSchema

type PostBbbBody []int64

type PostBody1Body PetSchema

type PostBody2Body map[string]interface{}

type PostBody3Body map[string]interface{}

type PostBody4Body struct {
	A *string `form:"a"`
}

type PostTestFromDataBody struct {
	Id   int64   `form:"id"`
	Name string  `form:"name"`
	Url  *string `form:"url"`
}

/* Response objects */

/* Responses */

type GetArray1Response struct {
	Code    int
	Http200 []struct {
		Key  string `json:"key,omitempty"`
		Text string `json:"text,omitempty"`
	}
}

type GetArray2Response struct {
	Code    int
	Http200 []PetSchema
}

type ListPetsResponse struct {
	Code        int
	Http200     PetsSchema
	HttpDefault *ErrorSchema
}

type CreatePetsResponse struct {
	Code int

	HttpDefault *ErrorSchema
}

type ShowPetByIdResponse struct {
	Code        int
	Http200     *PetSchema
	HttpDefault *ErrorSchema
}

type Controller interface {
	GetAaa(req *http.Request, res http.ResponseWriter) int
	PostAaa(params *PostAaaParams, body *PostAaaBody, req *http.Request, res http.ResponseWriter) int
	PutAaa(params *PutAaaParams, body *PutAaaBody, req *http.Request, res http.ResponseWriter) int
	GetArray1(req *http.Request, res http.ResponseWriter) GetArray1Response
	GetArray2(req *http.Request, res http.ResponseWriter) GetArray2Response
	PostBbb(body *PostBbbBody, req *http.Request, res http.ResponseWriter) int
	PostBody1(body *PostBody1Body, req *http.Request, res http.ResponseWriter) int
	PostBody2(body *PostBody2Body, req *http.Request, res http.ResponseWriter) int
	PostBody3(body *PostBody3Body, req *http.Request, res http.ResponseWriter) int
	PostBody4(body *PostBody4Body, req *http.Request, res http.ResponseWriter) int
	PostCcc(req *http.Request, res http.ResponseWriter) int
	ListPets(params *ListPetsParams, req *http.Request, res http.ResponseWriter) ListPetsResponse
	CreatePets(req *http.Request, res http.ResponseWriter) CreatePetsResponse
	ShowPetById(params *ShowPetByIdParams, req *http.Request, res http.ResponseWriter) ShowPetByIdResponse
	PostTestFromData(params *PostTestFromDataParams, body *PostTestFromDataBody, req *http.Request, res http.ResponseWriter) int
	GetTestInners(params *GetTestInnersParams, req *http.Request, res http.ResponseWriter) int
}

var validate *validator.Validate

func validateInputParameters(params interface{}) error {
	if params == nil {
		return nil
	}

	if validate == nil {
		validate = validator.New()
		validate.RegisterTagNameFunc(func(fld reflect.StructField) string {
			name := strings.SplitN(fld.Tag.Get("json"), ",", 2)[0]
			if name == "-" {
				return ""
			}
			return name
		})
	}

	err := validate.Struct(params)
	if validationErrors, ok := err.(validator.ValidationErrors); ok {
		for _, e := range validationErrors {
			return fmt.Errorf("validation error: parameter '%s' (%v), rule: %s \n", e.Field(), e.Value(), e.Tag())
		}
	}

	return nil
}

var defaultBinder = &echo.DefaultBinder{}

func initParameters(c echo.Context, parameters interface{}, body interface{}, controller Controller) (int, error) {
	if body != nil {
		if err := defaultBinder.BindBody(c, body); err != nil {
			return http.StatusBadRequest, err
		}
	}

	if parameters != nil {
		if err := defaultBinder.BindPathParams(c, parameters); err != nil {
			return http.StatusBadRequest, err
		}
		if err := defaultBinder.BindQueryParams(c, parameters); err != nil {
			return http.StatusBadRequest, err
		}
		if err := defaultBinder.BindHeaders(c, parameters); err != nil {
			return http.StatusBadRequest, err
		}

		if err := defaults.Set(parameters); err != nil {
			return http.StatusInternalServerError, err
		}
		if err := validateInputParameters(parameters); err != nil {
			return http.StatusBadRequest, err
		}
	}

	return 0, nil
}

func BuildRoutes(e *echo.Group, controller Controller) {
	e.GET("/aaa", func(c echo.Context) error {

		if status, err := initParameters(c, nil, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.GetAaa(c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.POST("/aaa", func(c echo.Context) error {
		body := &PostAaaBody{}
		parameters := &PostAaaParams{}

		if status, err := initParameters(c, parameters, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostAaa(parameters, body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.PUT("/aaa", func(c echo.Context) error {
		body := &PutAaaBody{}
		parameters := &PutAaaParams{}

		if status, err := initParameters(c, parameters, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PutAaa(parameters, body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.GET("/array1", func(c echo.Context) error {

		if status, err := initParameters(c, nil, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.GetArray1(c.Request(), c.Response().Writer)

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}

		return c.NoContent(response.Code)
	})

	e.GET("/array2", func(c echo.Context) error {

		if status, err := initParameters(c, nil, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.GetArray2(c.Request(), c.Response().Writer)

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}

		return c.NoContent(response.Code)
	})

	e.POST("/bbb", func(c echo.Context) error {
		body := &PostBbbBody{}

		if status, err := initParameters(c, nil, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostBbb(body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.POST("/body1", func(c echo.Context) error {
		body := &PostBody1Body{}

		if status, err := initParameters(c, nil, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostBody1(body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.POST("/body2", func(c echo.Context) error {
		body := &PostBody2Body{}

		if status, err := initParameters(c, nil, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostBody2(body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.POST("/body3", func(c echo.Context) error {
		body := &PostBody3Body{}

		if status, err := initParameters(c, nil, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostBody3(body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.POST("/body4", func(c echo.Context) error {
		body := &PostBody4Body{}

		if status, err := initParameters(c, nil, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostBody4(body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.POST("/ccc", func(c echo.Context) error {

		if status, err := initParameters(c, nil, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostCcc(c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.GET("/pets", func(c echo.Context) error {
		parameters := &ListPetsParams{}

		if status, err := initParameters(c, parameters, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.ListPets(parameters, c.Request(), c.Response().Writer)

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}
		if response.HttpDefault != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.HttpDefault)
		}

		return c.NoContent(response.Code)
	})

	e.POST("/pets", func(c echo.Context) error {

		if status, err := initParameters(c, nil, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.CreatePets(c.Request(), c.Response().Writer)

		if response.HttpDefault != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.HttpDefault)
		}

		return c.NoContent(response.Code)
	})

	e.GET("/pets/:petId", func(c echo.Context) error {
		parameters := &ShowPetByIdParams{}

		if status, err := initParameters(c, parameters, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.ShowPetById(parameters, c.Request(), c.Response().Writer)

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}
		if response.HttpDefault != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.HttpDefault)
		}

		return c.NoContent(response.Code)
	})

	e.POST("/testFromData", func(c echo.Context) error {
		body := &PostTestFromDataBody{}
		parameters := &PostTestFromDataParams{}

		if status, err := initParameters(c, parameters, body, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.PostTestFromData(parameters, body, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

	e.GET("/test_inners", func(c echo.Context) error {
		parameters := &GetTestInnersParams{}

		if status, err := initParameters(c, parameters, nil, controller); err != nil {
			return c.String(status, err.Error())
		}

		response := controller.GetTestInners(parameters, c.Request(), c.Response().Writer)

		return c.NoContent(response)
	})

}
