package v1

/**
    AUTOGENERATED. Please, do not edit.
**/

import (
	"fmt"
	"github.com/creasty/defaults"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	"net/http"
	"reflect"
	"strings"
)

/* Components schemas */

type CoordinatesSchema struct {
	Latitude  *float64 `json:"latitude"`
	Longitude *float64 `json:"longitude"`
}

type ImageSchema struct {
	AuthorName *string  `json:"author_name"`
	AuthorUrl  *string  `json:"author_url"`
	ImageUrl   *string  `json:"image_url"`
	Ratio      *float64 `json:"ratio"`
}

type PetAdviceSchema struct {
	Author   *PetAdviceAuthorSchema `json:"author"`
	HtmlText string                 `json:"html_text"`
	Text     string                 `json:"text"`
}

type PetAdviceAuthorSchema struct {
	AvatarUrl    *string `json:"avatar_url"`
	InstagramUrl *string `json:"instagram_url"`
	Name         *string `json:"name"`
	Role         *string `json:"role"`
}

type PetAudioSchema struct {
	Duration      *int64  `json:"duration"`
	Transcription *string `json:"transcription"`
	Url           *string `json:"url"`
}

type PetBulletSchema struct {
	Color  string        `json:"color"`
	Emoji  string        `json:"emoji"`
	Images []ImageSchema `json:"images"`
	Text   string        `json:"text"`
	Title  string        `json:"title"`
}

type PetButtonSchema struct {
	Coordinates *CoordinatesSchema `json:"coordinates"`
	Title       *string            `json:"title"`
	Type        *string            `json:"type"`
	Url         *string            `json:"url"`
}

type WalkPetSchema struct {
	Address          *string             `json:"address"`
	Coordinates      *CoordinatesSchema  `json:"coordinates"`
	Description      *string             `json:"description"`
	DescriptionShort *string             `json:"description_short"`
	Id               *int64              `json:"id"`
	Image            *ImageSchema        `json:"image"`
	IsKey            bool                `json:"is_key"`
	Path             []CoordinatesSchema `json:"path"`
	Title            *string             `json:"title"`
	Type             string              `json:"type"`
}

type WalkPreviewSchema struct {
	Description *string      `json:"description"`
	Iata        *string      `json:"iata"`
	Id          *int64       `json:"id"`
	Image       *ImageSchema `json:"image"`
	IsSoon      *bool        `json:"is_soon"`
	Title       *string      `json:"title"`
}

/* Components responses */

type ErrorResponse struct {
	Message string `json:"message"`
}

/* Parameters */

type GetPetByIdParams struct {
	Id     int64  `param:"id"`
	Locale string `query:"locale"`
}

type GetPetAudioByIdParams struct {
	Id     int64  `param:"id"`
	Locale string `query:"locale"`
}

type SavePetBulletParams struct {
}

type SaveImageParams struct {
}

type GetStyleParams struct {
	Theme string `param:"theme"`
}

type GetWalkByIdParams struct {
	Id     int64  `param:"id"`
	Locale string `query:"locale"`
}

type GetWalksPreviewParams struct {
	Iata   string `query:"iata" default:"" validate:""`
	Locale string `query:"locale"`
}

/* Requests bodies */

type SavePetBulletBody struct {
	PetId  *int64  `json:"Pet_id"`
	Color  string  `json:"color"`
	Emoji  string  `json:"emoji"`
	Images []int64 `json:"images"`
}

type SaveImageBody struct {
}

/* Response objects */

type GetPetByIdHttp200Response struct {
	Address          string            `json:"address,omitempty"`
	Advice           PetAdviceSchema   `json:"advice,omitempty"`
	Audio            PetAudioSchema    `json:"audio,omitempty"`
	Bullets          []PetBulletSchema `json:"bullets,omitempty"`
	Buttons          []PetButtonSchema `json:"buttons"`
	Description      string            `json:"description,omitempty"`
	DescriptionShort string            `json:"description_short,omitempty"`
	Id               int64             `json:"id,omitempty"`
	Images           []ImageSchema     `json:"images,omitempty"`
	Title            string            `json:"title,omitempty"`
}

type SaveImageHttp200Response struct {
	ImageId int64 `json:"image_id"`
}

type GetWalkByIdHttp200Response struct {
	Pets        []WalkPetSchema `json:"Pets,omitempty"`
	Description string          `json:"description,omitempty"`
	Duration    int64           `json:"duration,omitempty"`
	Id          int64           `json:"id,omitempty"`
	Image       ImageSchema     `json:"image,omitempty"`
	Length      int64           `json:"length,omitempty"`
	MapGeoJson  string          `json:"map_geo_json,omitempty"`
	MapImageUrl string          `json:"map_image_url,omitempty"`
	MaxZoom     float64         `json:"max_zoom,omitempty"`
	MinZoom     float64         `json:"min_zoom,omitempty"`
	StartZoom   float64         `json:"start_zoom,omitempty"`
	Tags        []string        `json:"tags,omitempty"`
	Title       string          `json:"title,omitempty"`
}

type GetWalksPreviewHttp200Response struct {
	Walks []WalkPreviewSchema `json:"walks,omitempty"`
}

/* Responses */

type GetPetByIdResponse struct {
	Code    int
	Http200 *GetPetByIdHttp200Response
}

type SaveImageResponse struct {
	Code    int
	Http200 *SaveImageHttp200Response
}

type GetStyleResponse struct {
	Code    int
	Http200 map[string]interface{}
}

type GetWalkByIdResponse struct {
	Code    int
	Http200 *GetWalkByIdHttp200Response
}

type GetWalksPreviewResponse struct {
	Code    int
	Http200 *GetWalksPreviewHttp200Response
}

type Controller interface {
	GetPetById(params *GetPetByIdParams, req *http.Request, res http.ResponseWriter) (GetPetByIdResponse, error)
	GetPetAudioById(params *GetPetAudioByIdParams, req *http.Request, res http.ResponseWriter) (int, error)
	SavePetBullet(params *SavePetBulletParams, body *SavePetBulletBody, req *http.Request, res http.ResponseWriter) (int, error)
	SaveImage(params *SaveImageParams, body *SaveImageBody, req *http.Request, res http.ResponseWriter) (SaveImageResponse, error)
	GetStyle(params *GetStyleParams, req *http.Request, res http.ResponseWriter) (GetStyleResponse, error)
	GetWalkById(params *GetWalkByIdParams, req *http.Request, res http.ResponseWriter) (GetWalkByIdResponse, error)
	GetWalksPreview(params *GetWalksPreviewParams, req *http.Request, res http.ResponseWriter) (GetWalksPreviewResponse, error)

	Error(err error) ErrorResponse
}

var validate *validator.Validate

func validateInputParameters(params interface{}) error {
	if params == nil {
		return nil
	}

	if validate == nil {
		validate = validator.New()
		validate.RegisterTagNameFunc(func(fld reflect.StructField) string {
			name := strings.SplitN(fld.Tag.Get("json"), ",", 2)[0]
			if name == "-" {
				return ""
			}
			return name
		})
	}

	err := validate.Struct(params)
	if validationErrors, ok := err.(validator.ValidationErrors); ok {
		for _, e := range validationErrors {
			return fmt.Errorf("validation error: parameter '%s' (%v), rule: %s \n", e.Field(), e.Value(), e.Tag())
		}
	}

	return nil
}

var defaultBinder = &echo.DefaultBinder{}

func initParameters(c echo.Context, parameters interface{}, body interface{}, controller Controller) error {
	if body != nil {
		if err := defaultBinder.BindBody(c, body); err != nil {
			return c.JSON(http.StatusBadRequest, controller.Error(err))
		}
	}

	if err := defaultBinder.BindPathParams(c, parameters); err != nil {
		return c.JSON(http.StatusBadRequest, controller.Error(err))
	}
	if err := defaultBinder.BindQueryParams(c, parameters); err != nil {
		return c.JSON(http.StatusBadRequest, controller.Error(err))
	}
	if err := defaultBinder.BindHeaders(c, parameters); err != nil {
		return c.JSON(http.StatusBadRequest, controller.Error(err))
	}

	if err := defaults.Set(parameters); err != nil {
		return c.JSON(http.StatusInternalServerError, controller.Error(err))
	}
	if err := validateInputParameters(parameters); err != nil {
		return c.JSON(http.StatusBadRequest, controller.Error(err))
	}

	return nil
}

func BuildRoutes(e *echo.Group, controller Controller, premium echo.MiddlewareFunc) {
	// Get Pet by id
	e.GET("/Pet/:id", func(c echo.Context) error {
		parameters := &GetPetByIdParams{}
		if err := initParameters(c, parameters, nil, controller); err != nil {
			return err
		}

		response, err := controller.GetPetById(parameters, c.Request(), c.Response().Writer)
		if err != nil {
			return c.JSON(response.Code, controller.Error(err))
		}

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}

		return c.NoContent(response.Code)
	}, premium)

	// Get Pet audio file by id
	e.GET("/Pet/:id/audio.mp3", func(c echo.Context) error {
		parameters := &GetPetAudioByIdParams{}
		if err := initParameters(c, parameters, nil, controller); err != nil {
			return err
		}

		response, err := controller.GetPetAudioById(parameters, c.Request(), c.Response().Writer)
		if err != nil {
			return c.JSON(response, controller.Error(err))
		}

		return c.NoContent(response)
	}, premium)

	// Create new Pet bullet
	e.POST("/Pet_bullet", func(c echo.Context) error {
		body := &SavePetBulletBody{}
		parameters := &SavePetBulletParams{}
		if err := initParameters(c, parameters, body, controller); err != nil {
			return err
		}

		response, err := controller.SavePetBullet(parameters, body, c.Request(), c.Response().Writer)
		if err != nil {
			return c.JSON(response, controller.Error(err))
		}

		return c.NoContent(response)
	})

	e.POST("/image", func(c echo.Context) error {
		body := &SaveImageBody{}
		parameters := &SaveImageParams{}
		if err := initParameters(c, parameters, body, controller); err != nil {
			return err
		}

		response, err := controller.SaveImage(parameters, body, c.Request(), c.Response().Writer)
		if err != nil {
			return c.JSON(response.Code, controller.Error(err))
		}

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}

		return c.NoContent(response.Code)
	})

	// Get light/dark theme
	e.GET("/style_:theme", func(c echo.Context) error {
		parameters := &GetStyleParams{}
		if err := initParameters(c, parameters, nil, controller); err != nil {
			return err
		}

		response, err := controller.GetStyle(parameters, c.Request(), c.Response().Writer)
		if err != nil {
			return c.JSON(response.Code, controller.Error(err))
		}

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}

		return c.NoContent(response.Code)
	})

	// Get walk by id
	e.GET("/walk/:id", func(c echo.Context) error {
		parameters := &GetWalkByIdParams{}
		if err := initParameters(c, parameters, nil, controller); err != nil {
			return err
		}

		response, err := controller.GetWalkById(parameters, c.Request(), c.Response().Writer)
		if err != nil {
			return c.JSON(response.Code, controller.Error(err))
		}

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}

		return c.NoContent(response.Code)
	})

	// Get all walks
	e.GET("/walks_previews", func(c echo.Context) error {
		parameters := &GetWalksPreviewParams{}
		if err := initParameters(c, parameters, nil, controller); err != nil {
			return err
		}

		response, err := controller.GetWalksPreview(parameters, c.Request(), c.Response().Writer)
		if err != nil {
			return c.JSON(response.Code, controller.Error(err))
		}

		if response.Http200 != nil {
			if response.Code == 0 {
				response.Code = 200
			}
			return c.JSON(response.Code, response.Http200)
		}

		return c.NoContent(response.Code)
	})

}
